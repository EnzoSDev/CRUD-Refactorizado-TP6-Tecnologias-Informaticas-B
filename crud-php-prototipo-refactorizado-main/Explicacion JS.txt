###################### HECHO CON CHAT GPT ###############################

Este c√≥digo es una aplicaci√≥n web b√°sica en JavaScript que permite gestionar estudiantes: listar, crear, editar y borrar. A continuaci√≥n, te hago un resumen claro y detallado de su funcionamiento:



üåê Conexi√≥n con el backend

    Usa una constante API_URL que apunta a un archivo PHP (server.php) que act√∫a como backend para procesar las solicitudes (crear, leer, actualizar, borrar estudiantes).



üì¶ Al cargar la p√°gina

    Se espera a que el contenido del DOM est√© cargado con el evento DOMContentLoaded.

    Se obtienen referencias a los elementos HTML: formulario, campos del formulario (nombre, email, edad, id oculto) y la tabla donde se mostrar√°n los estudiantes.

    Se llama a la funci√≥n asincr√≥nica fetchStudents() para obtener la lista actual de estudiantes desde el backend y mostrarla en la tabla.

‚úÖ Crear o actualizar estudiante (evento submit del formulario)

    Se captura el evento submit del formulario.

    Se llama a e.preventDefault() para evitar que el formulario se env√≠e por defecto y recargue la p√°gina.

    Se crea un objeto formData con los valores ingresados en los campos del formulario (fullname, email, age).

    Se verifica si el campo oculto studentId tiene un valor:

        Si tiene valor, significa que se est√° editando un estudiante existente, entonces se usa el m√©todo HTTP PUT para actualizar.

        Si est√° vac√≠o, se est√° creando un nuevo estudiante, entonces se usa el m√©todo POST.

    Si se est√° editando, se agrega el id al objeto formData.

    Se env√≠a la solicitud al backend usando fetch() con los par√°metros:

        method: POST o PUT seg√∫n corresponda.

        headers: especificando que el contenido es JSON.

        body: el objeto formData convertido a JSON con JSON.stringify().

    Si la respuesta del backend es exitosa (response.ok):

        Se limpia el formulario con studentForm.reset().

        Se limpia el campo oculto studentId para que quede vac√≠o.

        Se llama a fetchStudents() para actualizar la tabla y mostrar los datos actualizados.

    Si la respuesta no es exitosa, muestra una alerta de error.



üìã Mostrar lista de estudiantes (funci√≥n fetchStudents)

    Funci√≥n asincr√≥nica que solicita al backend (usando fetch) todos los estudiantes.

    Convierte la respuesta JSON a un objeto de JS con res.json().

    Limpia la tabla de estudiantes con replaceChildren() para eliminar las filas antiguas.

    Por cada estudiante recibido:

        Crea una fila (<tr>) y celdas (<td>) para nombre, email y edad.

        Crea dos botones:

            Editar: al hacer clic, rellena el formulario con los datos del estudiante y asigna el id al campo oculto studentId para editar luego.

            Borrar: al hacer clic, llama a la funci√≥n deleteStudent() con el id del estudiante para eliminarlo.

        A√±ade los botones a una celda de acciones y la fila completa a la tabla.

üóëÔ∏è Eliminar estudiante (funci√≥n deleteStudent)

    Funci√≥n asincr√≥nica que recibe el id del estudiante a borrar.

    Muestra un cuadro de confirmaci√≥n con confirm(). Si el usuario cancela, no hace nada.

    Si confirma, env√≠a una solicitud HTTP DELETE al backend con el id en el cuerpo de la petici√≥n en formato JSON.

    Si la respuesta es exitosa (response.ok), vuelve a llamar a fetchStudents() para actualizar la tabla.

    Si no es exitosa, muestra una alerta de error.